// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using RealEstate.Data;

#nullable disable

namespace RealEstate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220505174450_addedFS")]
    partial class addedFS
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "auth_group_name_a6ea08ec_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "auth_group_name_a6ea08ec_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Name" }, "auth_group_name_key")
                        .IsUnique();

                    b.ToTable("auth_group", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthGroupPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_group_permissions_group_id_b120cbf9");

                    b.HasIndex(new[] { "GroupId", "PermissionId" }, "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "PermissionId" }, "auth_group_permissions_permission_id_84c5c92e");

                    b.ToTable("auth_group_permissions", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Codename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("codename");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "auth_permission_content_type_id_2f476e4b");

                    b.HasIndex(new[] { "ContentTypeId", "Codename" }, "auth_permission_content_type_id_codename_01ab375a_uniq")
                        .IsUnique();

                    b.ToTable("auth_permission", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_joined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_staff");

                    b.Property<bool>("IsSuperuser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_superuser");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "auth_user_username_6821ab7c_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Username" }, "auth_user_username_6821ab7c_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Username" }, "auth_user_username_key")
                        .IsUnique();

                    b.ToTable("auth_user", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_user_groups_group_id_97559544");

                    b.HasIndex(new[] { "UserId" }, "auth_user_groups_user_id_6a12ed8b");

                    b.HasIndex(new[] { "UserId", "GroupId" }, "auth_user_groups_user_id_group_id_94350c0c_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_groups", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.AuthUserUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermissionId" }, "auth_user_user_permissions_permission_id_1fbb5f2c");

                    b.HasIndex(new[] { "UserId" }, "auth_user_user_permissions_user_id_a95ead1b");

                    b.HasIndex(new[] { "UserId", "PermissionId" }, "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_user_permissions", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Brokeragephonenumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_brokeragephonenumber_id_seq'::regclass)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("RealEstateBrokerFkId")
                        .HasColumnType("integer")
                        .HasColumnName("real_estate_broker_fk_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RealEstateBrokerFkId" }, "mainapp_brokeragephonenumber_real_estate_broker_fk_id_fd45cbee");

                    b.ToTable("brokeragephonenumber", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoAdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("ActionFlag")
                        .HasColumnType("smallint")
                        .HasColumnName("action_flag");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("action_time");

                    b.Property<string>("ChangeMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("change_message");

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectRepr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("object_repr");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "django_admin_log_content_type_id_c4bce8eb");

                    b.HasIndex(new[] { "UserId" }, "django_admin_log_user_id_c564eba6");

                    b.ToTable("django_admin_log", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("app_label");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppLabel", "Model" }, "django_content_type_app_label_model_76bd3d3b_uniq")
                        .IsUnique();

                    b.ToTable("django_content_type", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoMigration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("app");

                    b.Property<DateTime>("Applied")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("django_migrations", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoQOrmq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("key");

                    b.Property<DateTime?>("Lock")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.HasKey("Id");

                    b.ToTable("django_q_ormq", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoQSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Args")
                        .HasColumnType("text")
                        .HasColumnName("args");

                    b.Property<string>("Cluster")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cluster");

                    b.Property<string>("Cron")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cron");

                    b.Property<string>("Func")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("func");

                    b.Property<string>("Hook")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("hook");

                    b.Property<string>("Kwargs")
                        .HasColumnType("text")
                        .HasColumnName("kwargs");

                    b.Property<short?>("Minutes")
                        .HasColumnType("smallint")
                        .HasColumnName("minutes");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_run");

                    b.Property<int>("Repeats")
                        .HasColumnType("integer")
                        .HasColumnName("repeats");

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("schedule_type");

                    b.Property<string>("Task")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task");

                    b.HasKey("Id");

                    b.ToTable("django_q_schedule", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoQTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("id");

                    b.Property<string>("Args")
                        .HasColumnType("text")
                        .HasColumnName("args");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_count");

                    b.Property<string>("Func")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("func");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<string>("Hook")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("hook");

                    b.Property<string>("Kwargs")
                        .HasColumnType("text")
                        .HasColumnName("kwargs");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started");

                    b.Property<DateTime>("Stopped")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stopped");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "django_q_task_id_32882367_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Id" }, "django_q_task_id_32882367_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("django_q_task", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoSession", b =>
                {
                    b.Property<string>("SessionKey")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("session_key");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date");

                    b.Property<string>("SessionData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_data");

                    b.HasKey("SessionKey")
                        .HasName("django_session_pkey");

                    b.HasIndex(new[] { "ExpireDate" }, "django_session_expire_date_a5c62663");

                    b.HasIndex(new[] { "SessionKey" }, "django_session_session_key_c0390e0f_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "SessionKey" }, "django_session_session_key_c0390e0f_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("django_session", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.DjangoSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Domain" }, "django_site_domain_a2e37b91_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Domain" }, "django_site_domain_a2e37b91_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Domain" }, "django_site_domain_a2e37b91_uniq")
                        .IsUnique();

                    b.ToTable("django_site", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Home", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_home_id_seq'::regclass)");

                    b.Property<int?>("AddressFkId")
                        .HasColumnType("integer")
                        .HasColumnName("address_fk_id");

                    b.Property<string>("Basement")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("basement");

                    b.Property<double>("BathRooms")
                        .HasColumnType("double precision")
                        .HasColumnName("bath_rooms");

                    b.Property<double>("BedRooms")
                        .HasColumnType("double precision")
                        .HasColumnName("bed_rooms");

                    b.Property<string>("Brokerage")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("brokerage");

                    b.Property<string>("BuilderName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("builder_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FeaturesAndFinishes")
                        .HasColumnType("text")
                        .HasColumnName("features_and_finishes");

                    b.Property<bool>("FromRemax")
                        .HasColumnType("boolean")
                        .HasColumnName("from_remax");

                    b.Property<string>("GenSlug")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("gen_slug");

                    b.Property<string>("GeneralizedAddress")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("character varying(130)")
                        .HasColumnName("generalized_address");

                    b.Property<string>("HtmlPage")
                        .HasColumnType("text")
                        .HasColumnName("html_page");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasMaxLength(190)
                        .HasColumnType("character varying(190)")
                        .HasColumnName("link_url");

                    b.Property<string>("MlsNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("mls_number");

                    b.Property<string>("NeighborHood")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("neighbor_hood");

                    b.Property<bool>("NewConstruction")
                        .HasColumnType("boolean")
                        .HasColumnName("new_construction");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int?>("RealEstateBrokerFkId")
                        .HasColumnType("integer")
                        .HasColumnName("real_estate_broker_fk_id");

                    b.Property<long?>("RentPrice")
                        .HasColumnType("bigint")
                        .HasColumnName("rent_price");

                    b.Property<bool>("Rentable")
                        .HasColumnType("boolean")
                        .HasColumnName("rentable");

                    b.Property<NpgsqlTsVector>("searchvector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "GeneralizedAddress", "MlsNumber", "Brokerage", "Type", "SubType", "YearBuilt", "NeighborHood", "Description", "FeaturesAndFinishes", "GenSlug" });

                    b.Property<string>("SubType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("sub_type");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("YearBuilt")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("year_built");

                    b.HasKey("Id");

                    b.HasIndex("searchvector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("searchvector"), "GIN");

                    b.HasIndex(new[] { "AddressFkId" }, "mainapp_home_address_fk_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "BathRooms" }, "mainapp_home_bath_rooms_137edddd");

                    b.HasIndex(new[] { "BedRooms" }, "mainapp_home_bed_rooms_e1dd4d2b");

                    b.HasIndex(new[] { "CreatedAt" }, "mainapp_home_created_at_274498cc");

                    b.HasIndex(new[] { "GeneralizedAddress" }, "mainapp_home_generalized_address_3bde2872_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "GeneralizedAddress" }, "mainapp_home_generalized_address_3bde2872_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "GeneralizedAddress" }, "mainapp_home_generalized_address_key")
                        .IsUnique();

                    b.HasIndex(new[] { "LinkUrl" }, "mainapp_home_link_url_a7c2ffa4");

                    b.HasIndex(new[] { "LinkUrl" }, "mainapp_home_link_url_a7c2ffa4_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "LinkUrl" }, "mainapp_home_link_url_a7c2ffa4_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "MlsNumber" }, "mainapp_home_mls_number_695b3ba1");

                    b.HasIndex(new[] { "MlsNumber" }, "mainapp_home_mls_number_695b3ba1_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "MlsNumber" }, "mainapp_home_mls_number_695b3ba1_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Price" }, "mainapp_home_price_94cbb17b");

                    b.HasIndex(new[] { "RealEstateBrokerFkId" }, "mainapp_home_real_estate_broker_fk_id_cd1e8434");

                    b.HasIndex(new[] { "RentPrice" }, "mainapp_home_rent_price_ee9cc280");

                    b.HasIndex(new[] { "UpdatedAt" }, "mainapp_home_updated_at_2c8b37bc");

                    b.ToTable("home", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.HomeInterested", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_home_interested_id_seq'::regclass)");

                    b.Property<int>("HomeId")
                        .HasColumnType("integer")
                        .HasColumnName("home_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HomeId" }, "mainapp_home_interested_home_id_263ffd84");

                    b.HasIndex(new[] { "HomeId", "UserId" }, "mainapp_home_interested_home_id_user_id_93aac0c5_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "mainapp_home_interested_user_id_32383c2b");

                    b.ToTable("home_interested", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Imagelink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_homeimagelink_id_seq'::regclass)");

                    b.Property<int?>("HomeFkId")
                        .HasColumnType("integer")
                        .HasColumnName("home_fk_id");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("link");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HomeFkId" }, "mainapp_homeimagelink_home_fk_id_467c2a69");

                    b.ToTable("imagelink", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Landtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_landtype_id_seq'::regclass)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("landtype", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_location_id_seq'::regclass)");

                    b.Property<string>("City")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("city");

                    b.Property<string>("ExactAddress")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("exact_address");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("house_number");

                    b.Property<double?>("Lat")
                        .HasColumnType("double precision")
                        .HasColumnName("lat");

                    b.Property<double?>("Long")
                        .HasColumnType("double precision")
                        .HasColumnName("long");

                    b.Property<string>("MapBoxResult")
                        .HasColumnType("text")
                        .HasColumnName("map_box_result");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("postal_code");

                    b.Property<NpgsqlTsVector>("searchvector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "City", "ExactAddress", "PostalCode" });

                    b.HasKey("Id");

                    b.HasIndex("searchvector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("searchvector"), "GIN");

                    b.HasIndex(new[] { "City" }, "mainapp_location_city_36967550");

                    b.HasIndex(new[] { "City" }, "mainapp_location_city_36967550_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "City" }, "mainapp_location_city_36967550_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "HouseNumber" }, "mainapp_location_house_number_881c76ce");

                    b.HasIndex(new[] { "HouseNumber" }, "mainapp_location_house_number_881c76ce_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "HouseNumber" }, "mainapp_location_house_number_881c76ce_like"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Lat" }, "mainapp_location_lat_2905578d");

                    b.HasIndex(new[] { "Long" }, "mainapp_location_long_cfc4fc6a");

                    b.HasIndex(new[] { "PostalCode" }, "mainapp_location_postal_code_2d4d36cd");

                    b.HasIndex(new[] { "PostalCode" }, "mainapp_location_postal_code_2d4d36cd_like");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "PostalCode" }, "mainapp_location_postal_code_2d4d36cd_like"), new[] { "varchar_pattern_ops" });

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Realestatebroker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_realestatebroker_id_seq'::regclass)");

                    b.Property<string>("Brokerage")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("character varying(65)")
                        .HasColumnName("brokerage");

                    b.Property<string>("BrokerageWebsite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brokerageWebsite");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("character varying(65)")
                        .HasColumnName("name");

                    b.Property<NpgsqlTsVector>("searchvector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Brokerage" });

                    b.HasKey("Id");

                    b.HasIndex("searchvector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("searchvector"), "GIN");

                    b.ToTable("realestatebroker", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_room_id_seq'::regclass)");

                    b.Property<int?>("HomeFkId")
                        .HasColumnType("integer")
                        .HasColumnName("home_fk_id");

                    b.Property<string>("Location")
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("RoomSize")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("room_size");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HomeFkId" }, "mainapp_room_home_fk_id_20c7a123");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Scraperconfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_scrapingconfig_id_seq'::regclass)");

                    b.Property<string>("BaseDomain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base_domain");

                    b.Property<string>("ScrapConfigName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scrap_config_name");

                    b.HasKey("Id");

                    b.ToTable("scraperconfig", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Searchlocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_scrapingsearchlocation_id_seq'::regclass)");

                    b.Property<string>("LocationName")
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<int?>("ScrapingConfigFkId")
                        .HasColumnType("integer")
                        .HasColumnName("scraping_config_fk_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScrapingConfigFkId" }, "mainapp_scrapingsearchlocation_scraping_config_fk_id_6f277334");

                    b.ToTable("searchlocation", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Useragentname", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_useragentname_id_seq'::regclass)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("useragentname", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Userprofileinfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('mainapp_userprofileinfo_id_seq'::regclass)");

                    b.Property<int>("UserFkId")
                        .HasColumnType("integer")
                        .HasColumnName("user_fk_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserFkId" }, "mainapp_userprofileinfo_user_fk_id_key")
                        .IsUnique();

                    b.ToTable("userprofileinfo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstate.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.Models.AuthGroupPermission", b =>
                {
                    b.HasOne("RealEstate.Models.AuthGroup", "Group")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("auth_group_permissions_group_id_b120cbf9_fk_auth_group_id");

                    b.HasOne("RealEstate.Models.AuthPermission", "Permission")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("auth_group_permissio_permission_id_84c5c92e_fk_auth_perm");

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("RealEstate.Models.AuthPermission", b =>
                {
                    b.HasOne("RealEstate.Models.DjangoContentType", "ContentType")
                        .WithMany("AuthPermissions")
                        .HasForeignKey("ContentTypeId")
                        .IsRequired()
                        .HasConstraintName("auth_permission_content_type_id_2f476e4b_fk_django_co");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("RealEstate.Models.AuthUserGroup", b =>
                {
                    b.HasOne("RealEstate.Models.AuthGroup", "Group")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("auth_user_groups_group_id_97559544_fk_auth_group_id");

                    b.HasOne("RealEstate.Models.AuthUser", "User")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("auth_user_groups_user_id_6a12ed8b_fk_auth_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.AuthUserUserPermission", b =>
                {
                    b.HasOne("RealEstate.Models.AuthPermission", "Permission")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm");

                    b.HasOne("RealEstate.Models.AuthUser", "User")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Brokeragephonenumber", b =>
                {
                    b.HasOne("RealEstate.Models.Realestatebroker", "RealEstateBrokerFk")
                        .WithMany("Brokeragephonenumbers")
                        .HasForeignKey("RealEstateBrokerFkId")
                        .HasConstraintName("mainapp_brokeragepho_real_estate_broker_f_fd45cbee_fk_mainapp_r");

                    b.Navigation("RealEstateBrokerFk");
                });

            modelBuilder.Entity("RealEstate.Models.DjangoAdminLog", b =>
                {
                    b.HasOne("RealEstate.Models.DjangoContentType", "ContentType")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("ContentTypeId")
                        .HasConstraintName("django_admin_log_content_type_id_c4bce8eb_fk_django_co");

                    b.HasOne("RealEstate.Models.AuthUser", "User")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("django_admin_log_user_id_c564eba6_fk_auth_user_id");

                    b.Navigation("ContentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Home", b =>
                {
                    b.HasOne("RealEstate.Models.Location", "AddressFk")
                        .WithOne("Home")
                        .HasForeignKey("RealEstate.Models.Home", "AddressFkId")
                        .HasConstraintName("mainapp_home_address_fk_id_aa9741e6_fk_mainapp_location_id");

                    b.HasOne("RealEstate.Models.Realestatebroker", "RealEstateBrokerFk")
                        .WithMany("Homes")
                        .HasForeignKey("RealEstateBrokerFkId")
                        .HasConstraintName("mainapp_home_real_estate_broker_f_cd1e8434_fk_mainapp_r");

                    b.Navigation("AddressFk");

                    b.Navigation("RealEstateBrokerFk");
                });

            modelBuilder.Entity("RealEstate.Models.HomeInterested", b =>
                {
                    b.HasOne("RealEstate.Models.Home", "Home")
                        .WithMany("HomeInteresteds")
                        .HasForeignKey("HomeId")
                        .IsRequired()
                        .HasConstraintName("mainapp_home_interested_home_id_263ffd84_fk_mainapp_home_id");

                    b.HasOne("RealEstate.Models.AuthUser", "User")
                        .WithMany("HomeInteresteds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("mainapp_home_interested_user_id_32383c2b_fk_auth_user_id");

                    b.Navigation("Home");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Imagelink", b =>
                {
                    b.HasOne("RealEstate.Models.Home", "HomeFk")
                        .WithMany("Imagelinks")
                        .HasForeignKey("HomeFkId")
                        .HasConstraintName("mainapp_homeimagelink_home_fk_id_467c2a69_fk_mainapp_home_id");

                    b.Navigation("HomeFk");
                });

            modelBuilder.Entity("RealEstate.Models.Room", b =>
                {
                    b.HasOne("RealEstate.Models.Home", "HomeFk")
                        .WithMany("Rooms")
                        .HasForeignKey("HomeFkId")
                        .HasConstraintName("mainapp_room_home_fk_id_20c7a123_fk_mainapp_home_id");

                    b.Navigation("HomeFk");
                });

            modelBuilder.Entity("RealEstate.Models.Searchlocation", b =>
                {
                    b.HasOne("RealEstate.Models.Scraperconfig", "ScrapingConfigFk")
                        .WithMany("Searchlocations")
                        .HasForeignKey("ScrapingConfigFkId")
                        .HasConstraintName("mainapp_scrapingsear_scraping_config_fk_i_6f277334_fk_mainapp_s");

                    b.Navigation("ScrapingConfigFk");
                });

            modelBuilder.Entity("RealEstate.Models.Userprofileinfo", b =>
                {
                    b.HasOne("RealEstate.Models.AuthUser", "UserFk")
                        .WithOne("Userprofileinfo")
                        .HasForeignKey("RealEstate.Models.Userprofileinfo", "UserFkId")
                        .IsRequired()
                        .HasConstraintName("mainapp_userprofileinfo_user_fk_id_9fe7715b_fk_auth_user_id");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("RealEstate.Models.AuthGroup", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserGroups");
                });

            modelBuilder.Entity("RealEstate.Models.AuthPermission", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserUserPermissions");
                });

            modelBuilder.Entity("RealEstate.Models.AuthUser", b =>
                {
                    b.Navigation("AuthUserGroups");

                    b.Navigation("AuthUserUserPermissions");

                    b.Navigation("DjangoAdminLogs");

                    b.Navigation("HomeInteresteds");

                    b.Navigation("Userprofileinfo")
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.Models.DjangoContentType", b =>
                {
                    b.Navigation("AuthPermissions");

                    b.Navigation("DjangoAdminLogs");
                });

            modelBuilder.Entity("RealEstate.Models.Home", b =>
                {
                    b.Navigation("HomeInteresteds");

                    b.Navigation("Imagelinks");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("RealEstate.Models.Location", b =>
                {
                    b.Navigation("Home");
                });

            modelBuilder.Entity("RealEstate.Models.Realestatebroker", b =>
                {
                    b.Navigation("Brokeragephonenumbers");

                    b.Navigation("Homes");
                });

            modelBuilder.Entity("RealEstate.Models.Scraperconfig", b =>
                {
                    b.Navigation("Searchlocations");
                });
#pragma warning restore 612, 618
        }
    }
}
